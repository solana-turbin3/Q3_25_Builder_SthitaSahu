"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkPluginAuthorities = exports.pluginTypeFromAssetPluginKey = exports.assetPluginKeyFromType = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const utils_1 = require("../utils");
const generated_1 = require("../generated");
const state_1 = require("./state");
const authority_1 = require("./authority");
/**
 * Convert a plugin type to a key for the asset plugins.
 * @param {AssetV1} pluginType Asset
 * @returns {AssetPluginKey}
 */
function assetPluginKeyFromType(pluginType) {
    return (0, utils_1.lowercaseFirstLetter)(generated_1.PluginType[pluginType]);
}
exports.assetPluginKeyFromType = assetPluginKeyFromType;
/**
 * Convert a plugin key to a type.
 * @param {AssetPluginKey} key Asset plugin key
 * @returns {PluginType}
 */
function pluginTypeFromAssetPluginKey(key) {
    return generated_1.PluginType[(0, utils_1.capitalizeFirstLetter)(key)];
}
exports.pluginTypeFromAssetPluginKey = pluginTypeFromAssetPluginKey;
/**
 * Check the authority for the given plugin types on an asset.
 * @param {CheckPluginAuthoritiesArgs} args Arguments
 * @returns {boolean[]} Array of booleans indicating if the authority matches the plugin authority
 */
function checkPluginAuthorities({ authority, pluginTypes, asset, collection, }) {
    const cAddress = (0, state_1.collectionAddress)(asset);
    if (cAddress && cAddress !== collection?.publicKey) {
        throw new Error('Collection mismatch');
    }
    const dAsset = (0, state_1.deriveAssetPlugins)(asset, collection);
    const auth = (0, umi_1.publicKey)(authority);
    const isUpdateAuth = (0, authority_1.hasAssetUpdateAuthority)(auth, asset, collection);
    const isOwner = (0, state_1.isAssetOwner)(auth, asset);
    return pluginTypes.map((type) => {
        const plugin = dAsset[assetPluginKeyFromType(type)];
        if (plugin) {
            if ((0, authority_1.hasPluginAddressAuthority)(auth, plugin.authority) ||
                (plugin.authority.type === 'UpdateAuthority' && isUpdateAuth) ||
                (plugin.authority.type === 'Owner' && isOwner)) {
                return true;
            }
        }
        return false;
    });
}
exports.checkPluginAuthorities = checkPluginAuthorities;
//# sourceMappingURL=plugin.js.map