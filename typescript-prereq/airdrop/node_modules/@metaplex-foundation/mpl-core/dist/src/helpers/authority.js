"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasCollectionUpdateAuthority = exports.hasAssetUpdateAuthority = exports.hasPluginUpdateAuthority = exports.hasPluginOwnerAuthority = exports.hasPluginAddressAuthority = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const state_1 = require("./state");
/**
 * Check if the given pubkey has the Address authority for the plugin.
 * @param {PublicKey | string} pubkey Pubkey
 * @param {PluginAuthority} authority Plugin authority
 * @returns {boolean} True if the pubkey has the authority
 */
function hasPluginAddressAuthority(pubkey, authority) {
    return (authority.type === 'Address' && authority.address === (0, umi_1.publicKey)(pubkey));
}
exports.hasPluginAddressAuthority = hasPluginAddressAuthority;
/**
 * Check if the given pubkey has the Owner authority for the plugin.
 * @param {PublicKey | string} pubkey Pubkey
 * @param {PluginAuthority} authority Plugin authority
 * @param {AssetV1} asset Asset
 * @returns {boolean} True if the pubkey has the authority
 */
function hasPluginOwnerAuthority(pubkey, authority, asset) {
    return authority.type === 'Owner' && (0, state_1.isAssetOwner)(pubkey, asset);
}
exports.hasPluginOwnerAuthority = hasPluginOwnerAuthority;
/**
 * Check if the given pubkey has the UpdateAuthority authority for the plugin.
 * @param {PublicKey | string} pubkey Pubkey
 * @param {PluginAuthority} authority Plugin authority
 * @param {AssetV1} asset Asset
 * @param {CollectionV1 | undefined} collection Collection
 * @returns {boolean} True if the pubkey has the authority
 */
function hasPluginUpdateAuthority(pubkey, authority, asset, collection) {
    return (authority.type === 'UpdateAuthority' &&
        hasAssetUpdateAuthority(pubkey, asset, collection));
}
exports.hasPluginUpdateAuthority = hasPluginUpdateAuthority;
/**
 * Check if the given pubkey has the update authority for the asset.
 * If the asset specifies a collection as the update authority, the collection's update authority is checked.
 * If there are update delegates, they are also checked
 * @param {string | PublicKey} pubkey Pubkey
 * @param {AssetV1} asset Asset
 * @param {CollectionV1 | undefined} collection Collection
 * @returns {boolean} True if the pubkey is the update authority
 */
function hasAssetUpdateAuthority(pubkey, asset, collection) {
    const key = (0, umi_1.publicKey)(pubkey);
    const dAsset = (0, state_1.deriveAssetPlugins)(asset, collection);
    if (dAsset.updateAuthority.type === 'Collection' &&
        dAsset.updateAuthority.address !== collection?.publicKey) {
        throw Error('Collection mismatch');
    }
    // check if pubkey matches asset update auth or collection or derived delegate plugin
    if ((dAsset.updateAuthority.type === 'Address' &&
        dAsset.updateAuthority.address === key) ||
        (dAsset.updateDelegate?.authority.type === 'Address' &&
            dAsset.updateDelegate?.authority.address === key) ||
        (dAsset.updateDelegate?.authority.type === 'Owner' &&
            dAsset.owner === key) ||
        (dAsset.updateAuthority.type === 'Collection' &&
            collection?.updateAuthority === key)) {
        return true;
    }
    return false;
}
exports.hasAssetUpdateAuthority = hasAssetUpdateAuthority;
/**
 * CHeck if the given pubkey has update authority for the collection.
 * @param {string | PublicKey} pubkey Pubkey
 * @param {CollectionV1} collection Collection
 * @returns {boolean} True if the pubkey is the update authority
 */
function hasCollectionUpdateAuthority(pubkey, collection) {
    const key = (0, umi_1.publicKey)(pubkey);
    if (collection.updateAuthority === key ||
        (collection.updateDelegate?.authority.type === 'Address' &&
            collection.updateDelegate?.authority.address === key)) {
        return true;
    }
    return false;
}
exports.hasCollectionUpdateAuthority = hasCollectionUpdateAuthority;
//# sourceMappingURL=authority.js.map