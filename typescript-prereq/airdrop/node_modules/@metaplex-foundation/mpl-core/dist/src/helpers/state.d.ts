import { PublicKey } from '@metaplex-foundation/umi';
import { LinkedLifecycleHookPlugin } from '../plugins/linkedLifecycleHook';
import { AssetV1, CollectionV1 } from '../generated';
import { ExternalPluginAdaptersList } from '../plugins';
import { OraclePlugin } from '../plugins/oracle';
import { AppDataPlugin } from '../plugins/appData';
import { LifecycleHookPlugin } from '../plugins/lifecycleHook';
import { DataSectionPlugin } from '../plugins/dataSection';
import { LinkedAppDataPlugin } from '../plugins/linkedAppData';
/**
 * Find the collection address for the given asset if it is part of a collection.
 * @param {AssetV1} asset Asset
 * @returns {PublicKey | undefined} Collection address
 */
export declare function collectionAddress(asset: AssetV1): PublicKey | undefined;
export declare const getExternalPluginAdapterKeyAsString: (plugin: Pick<OraclePlugin, 'type' | 'baseAddress'> | Pick<AppDataPlugin, 'type' | 'dataAuthority'> | Pick<LifecycleHookPlugin, 'type' | 'hookedProgram'> | Pick<LinkedAppDataPlugin, 'type' | 'dataAuthority'> | Pick<LinkedLifecycleHookPlugin, 'type' | 'hookedProgram'> | Pick<DataSectionPlugin, 'type' | 'parentKey'>) => string;
export declare const deriveExternalPluginAdapters: (asset: ExternalPluginAdaptersList, collection?: ExternalPluginAdaptersList) => ExternalPluginAdaptersList;
/**
 * Derive the asset plugins from the asset and collection. Plugins on the asset take precedence over plugins on the collection.
 * @param {AssetV1} asset Asset
 * @param {CollectionV1 | undefined} collection Collection
 * @returns {AssetV1} Asset with plugins
 */
export declare function deriveAssetPlugins(asset: AssetV1, collection?: CollectionV1): AssetV1;
/**
 * Check if the asset is frozen.
 * @param {AssetV1} asset Asset
 * @param {CollectionV1 | undefined} collection Collection
 * @returns {boolean} True if the asset is frozen
 */
export declare function isFrozen(asset: AssetV1, collection?: CollectionV1): boolean;
/**
 * Check if the given pubkey is the owner of the asset.
 * @param {string | PublicKey} pubkey Pubkey
 * @param {AssetV1} asset Asset
 * @returns {boolean} True if the pubkey is the owner
 */
export declare function isAssetOwner(pubkey: string | PublicKey, asset: AssetV1): boolean;
