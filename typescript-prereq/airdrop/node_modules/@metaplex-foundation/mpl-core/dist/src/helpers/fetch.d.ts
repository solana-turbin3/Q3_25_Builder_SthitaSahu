import { Context, PublicKey, RpcGetAccountOptions, Signer } from '@metaplex-foundation/umi';
import { AssetV1, CollectionV1 } from '../generated';
/**
 * Helper function to derive plugins for a list of assets while fetching relevant collections.
 *
 * @param umi Context
 * @param assets Assets to derive plugins for
 * @returns Promise of a list of `AssetV1`
 */
export declare const deriveAssetPluginsWithFetch: (umi: Context, assets: AssetV1[]) => Promise<AssetV1[]>;
/**
 * Helper function to fetch assets by owner using GPA. For more filters, use the `getAssetV1GpaBuilder` directly.
 * For faster performance or more flexible queries, use DAS with `mpl-core-das` package.
 *
 * @param umi Context
 * @param owner Owner of the assets
 * @param options Options, `skipDerivePlugins` plugins from collection is false by default
 * @returns Promise of a list of `AssetV1`
 */
export declare const fetchAssetsByOwner: (umi: Context, owner: PublicKey | Signer | string, options?: {
    skipDerivePlugins?: boolean;
}) => Promise<AssetV1[]>;
/**
 * Helper function to fetch assets by collection using GPA. For more filters, use the `getAssetV1GpaBuilder` directly.
 * For faster performance or more flexible queries, use DAS with `mpl-core-das` package.
 *
 * @param umi Context
 * @param collection Assets that belong to this collection
 * @param options Options, `skipDerivePlugins` plugins from collection is false by default
 * @returns Promise of a list of `AssetV1`
 */
export declare const fetchAssetsByCollection: (umi: Context, collection: PublicKey | string, options?: {
    skipDerivePlugins?: boolean;
}) => Promise<AssetV1[]>;
/**
 * Helper function to fetch collections by update authority using GPA. For more filters, use the `getCollectionV1GpaBuilder` directly.
 * For faster performance or more flexible queries, use DAS with `mpl-core-das` package.
 *
 * @param umi Context
 * @param authority Update authority of the collections
 * @returns
 */
export declare const fetchCollectionsByUpdateAuthority: (umi: Context, authority: PublicKey | string) => Promise<CollectionV1[]>;
/**
 * Helper function to fetch an asset and derive plugins from the collection if applicable.
 *
 * @param umi
 * @param asset
 * @param options
 */
export declare const fetchAsset: (umi: Context, asset: PublicKey | string, options?: {
    skipDerivePlugins?: boolean;
} & RpcGetAccountOptions) => Promise<AssetV1>;
/**
 * Helper function to fetch multiple assets and derive plugins from their collections if applicable.
 *
 * @param umi Context
 * @param assets Array of asset addresses to fetch
 * @param options Options, `skipDerivePlugins` plugins from collection is false by default; `chunksize` how many assets to fetch in a single rpc call.
 * @returns Promise of a list of `AssetV1`
 */
export declare const fetchAllAssets: (umi: Context, assets: Array<PublicKey | string>, options?: {
    skipDerivePlugins?: boolean;
    chunkSize?: number;
} & RpcGetAccountOptions) => Promise<AssetV1[]>;
/**
 * Helper function to fetch a collection.
 *
 * @param umi
 * @param collection
 */
export declare const fetchCollection: (umi: Context, collection: PublicKey | string, options?: RpcGetAccountOptions) => Promise<CollectionV1>;
