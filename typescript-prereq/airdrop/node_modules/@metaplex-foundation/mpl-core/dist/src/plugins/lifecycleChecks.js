"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lifecycleChecksFromBase = exports.lifecycleChecksToBase = exports.hookableLifecycleEventToLifecycleCheckKey = exports.lifecycleCheckKeyToEnum = exports.checkResultsToAdapterCheckResult = exports.adapterCheckResultToCheckResults = exports.CheckResult = void 0;
/* eslint-disable no-bitwise */
const generated_1 = require("../generated");
const utils_1 = require("../utils");
//  ExternalCheckResult is a bit array
var CheckResult;
(function (CheckResult) {
    CheckResult[CheckResult["CAN_LISTEN"] = 0] = "CAN_LISTEN";
    CheckResult[CheckResult["CAN_APPROVE"] = 1] = "CAN_APPROVE";
    CheckResult[CheckResult["CAN_REJECT"] = 2] = "CAN_REJECT";
})(CheckResult = exports.CheckResult || (exports.CheckResult = {}));
const adapterCheckResultToCheckResults = (check) => {
    const results = [];
    if (check.flags & 1) {
        results.push(CheckResult.CAN_LISTEN);
    }
    if (check.flags & 2) {
        results.push(CheckResult.CAN_APPROVE);
    }
    if (check.flags & 4) {
        results.push(CheckResult.CAN_REJECT);
    }
    return results;
};
exports.adapterCheckResultToCheckResults = adapterCheckResultToCheckResults;
const checkResultsToAdapterCheckResult = (results) => {
    let flags = 0;
    results.forEach((result) => {
        switch (result) {
            case CheckResult.CAN_LISTEN:
                flags |= 1;
                break;
            case CheckResult.CAN_APPROVE:
                flags |= 2;
                break;
            case CheckResult.CAN_REJECT:
                flags |= 4;
                break;
            default:
            // Do nothing
        }
    });
    return { flags };
};
exports.checkResultsToAdapterCheckResult = checkResultsToAdapterCheckResult;
function lifecycleCheckKeyToEnum(key) {
    return generated_1.HookableLifecycleEvent[(0, utils_1.capitalizeFirstLetter)(key)];
}
exports.lifecycleCheckKeyToEnum = lifecycleCheckKeyToEnum;
function hookableLifecycleEventToLifecycleCheckKey(event) {
    return generated_1.HookableLifecycleEvent[event].toLowerCase();
}
exports.hookableLifecycleEventToLifecycleCheckKey = hookableLifecycleEventToLifecycleCheckKey;
function lifecycleChecksToBase(l) {
    return Object.keys(l)
        .map((key) => {
        const k = key;
        const value = l[k];
        if (value) {
            return [
                lifecycleCheckKeyToEnum(k),
                (0, exports.checkResultsToAdapterCheckResult)(value),
            ];
        }
        return null;
    })
        .filter((x) => x !== null);
}
exports.lifecycleChecksToBase = lifecycleChecksToBase;
function lifecycleChecksFromBase(l) {
    const checks = {};
    l.forEach(([event, check]) => {
        checks[hookableLifecycleEventToLifecycleCheckKey(event)] =
            (0, exports.adapterCheckResultToCheckResults)(check);
    });
    return checks;
}
exports.lifecycleChecksFromBase = lifecycleChecksFromBase;
//# sourceMappingURL=lifecycleChecks.js.map