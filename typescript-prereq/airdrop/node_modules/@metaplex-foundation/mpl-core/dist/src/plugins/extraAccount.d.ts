import { AccountMeta, Context, PublicKey } from '@metaplex-foundation/umi';
import { BaseExtraAccount } from '../generated';
import { Seed } from './seed';
import { RenameToType } from '../utils';
export declare const PRECONFIGURED_SEED = "mpl-core";
export declare const findPreconfiguredPda: (context: Pick<Context, 'eddsa'>, program: PublicKey, key: PublicKey) => import("@metaplex-foundation/umi").Pda<string, number>;
export type ExtraAccount = (Omit<Exclude<RenameToType<BaseExtraAccount>, {
    type: 'CustomPda';
} | {
    type: 'Address';
}>, 'isSigner' | 'isWritable'> & {
    isSigner?: boolean;
    isWritable?: boolean;
}) | {
    type: 'CustomPda';
    seeds: Array<Seed>;
    customProgramId?: PublicKey;
    isSigner?: boolean;
    isWritable?: boolean;
} | {
    type: 'Address';
    address: PublicKey;
    isSigner?: boolean;
    isWritable?: boolean;
};
export declare function extraAccountToAccountMeta(context: Pick<Context, 'eddsa'>, e: ExtraAccount, inputs: {
    program?: PublicKey;
    asset?: PublicKey;
    collection?: PublicKey;
    recipient?: PublicKey;
    owner?: PublicKey;
}): AccountMeta;
export declare function extraAccountToBase(s: ExtraAccount): BaseExtraAccount;
export declare function extraAccountFromBase(s: BaseExtraAccount): ExtraAccount;
export type ExtraAccountInput = 'owner' | 'recipient' | 'asset' | 'collection' | 'program';
export declare function getExtraAccountRequiredInputs(s: ExtraAccount): ExtraAccountInput[];
