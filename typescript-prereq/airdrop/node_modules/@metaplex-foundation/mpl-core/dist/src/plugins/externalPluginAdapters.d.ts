import { AccountMeta, Context, PublicKey } from '@metaplex-foundation/umi';
import { LifecycleHookInitInfoArgs, LifecycleHookPlugin, LifecycleHookUpdateInfoArgs } from '.';
import { BaseExternalPluginAdapterInitInfoArgs, BaseExternalPluginAdapterKey, BaseExternalPluginAdapterUpdateInfoArgs, ExternalRegistryRecord } from '../generated';
import { AppDataInitInfoArgs, AppDataPlugin, AppDataUpdateInfoArgs } from './appData';
import { LifecycleChecksContainer, LifecycleEvent } from './lifecycleChecks';
import { OracleInitInfoArgs, OraclePlugin, OracleUpdateInfoArgs } from './oracle';
import { BasePlugin } from './types';
import { LinkedAppDataInitInfoArgs, LinkedAppDataPlugin, LinkedAppDataUpdateInfoArgs } from './linkedAppData';
import { DataSectionPlugin } from './dataSection';
import { LinkedLifecycleHookInitInfoArgs, LinkedLifecycleHookPlugin, LinkedLifecycleHookUpdateInfoArgs } from './linkedLifecycleHook';
export type ExternalPluginAdapterTypeString = BaseExternalPluginAdapterKey['__kind'];
export type BaseExternalPluginAdapter = BasePlugin & ExternalPluginAdapterData & LifecycleChecksContainer;
export type ExternalPluginAdapters = LifecycleHookPlugin | OraclePlugin | AppDataPlugin | LinkedLifecycleHookPlugin | LinkedAppDataPlugin | DataSectionPlugin;
export type ExternalPluginAdaptersList = {
    lifecycleHooks?: LifecycleHookPlugin[];
    oracles?: OraclePlugin[];
    appDatas?: AppDataPlugin[];
    linkedLifecycleHooks?: LinkedLifecycleHookPlugin[];
    linkedAppDatas?: LinkedAppDataPlugin[];
    dataSections?: DataSectionPlugin[];
};
export type ExternalPluginAdapterInitInfoArgs = ({
    type: 'LifecycleHook';
} & LifecycleHookInitInfoArgs) | ({
    type: 'Oracle';
} & OracleInitInfoArgs) | ({
    type: 'AppData';
} & AppDataInitInfoArgs) | ({
    type: 'LinkedLifecycleHook';
} & LinkedLifecycleHookInitInfoArgs) | ({
    type: 'LinkedAppData';
} & LinkedAppDataInitInfoArgs) | ({
    type: 'DataSection';
} & AppDataInitInfoArgs);
export type ExternalPluginAdapterUpdateInfoArgs = ({
    type: 'LifecycleHook';
} & LifecycleHookUpdateInfoArgs) | ({
    type: 'Oracle';
} & OracleUpdateInfoArgs) | ({
    type: 'AppData';
} & AppDataUpdateInfoArgs) | ({
    type: 'LinkedLifecycleHook';
} & LinkedLifecycleHookUpdateInfoArgs) | ({
    type: 'LinkedAppData';
} & LinkedAppDataUpdateInfoArgs);
export declare const externalPluginAdapterManifests: {
    LifecycleHook: import("./externalPluginAdapterManifest").ExternalPluginAdapterManifest<import("./lifecycleHook").LifecycleHook, import("../generated").BaseLifecycleHook, LifecycleHookInitInfoArgs, import("../generated").BaseLifecycleHookInitInfoArgs, LifecycleHookUpdateInfoArgs, import("../generated").BaseLifecycleHookUpdateInfoArgs>;
    Oracle: import("./externalPluginAdapterManifest").ExternalPluginAdapterManifest<import("./oracle").Oracle, import("../generated").BaseOracle, OracleInitInfoArgs, import("../generated").BaseOracleInitInfoArgs, OracleUpdateInfoArgs, import("../generated").BaseOracleUpdateInfoArgs>;
    AppData: import("./externalPluginAdapterManifest").ExternalPluginAdapterManifest<import("./appData").AppData, import("../generated").BaseAppData, AppDataInitInfoArgs, import("../generated").BaseAppDataInitInfoArgs, AppDataUpdateInfoArgs, import("../generated").BaseAppDataUpdateInfoArgs>;
    LinkedLifecycleHook: import("./externalPluginAdapterManifest").ExternalPluginAdapterManifest<import("./linkedLifecycleHook").LinkedLifecycleHook, import("../generated").BaseLinkedLifecycleHook, LinkedLifecycleHookInitInfoArgs, import("../generated").BaseLinkedLifecycleHookInitInfoArgs, LinkedLifecycleHookUpdateInfoArgs, import("../generated").BaseLinkedLifecycleHookUpdateInfoArgs>;
    LinkedAppData: import("./externalPluginAdapterManifest").ExternalPluginAdapterManifest<import("./linkedAppData").LinkedAppData, import("../generated").BaseLinkedAppData, LinkedAppDataInitInfoArgs, import("../generated").BaseLinkedAppDataInitInfoArgs, LinkedAppDataUpdateInfoArgs, import("../generated").BaseLinkedAppDataUpdateInfoArgs>;
    DataSection: import("./externalPluginAdapterManifest").ExternalPluginAdapterManifest<import("./dataSection").DataSection, import("../generated").BaseDataSection, import("./dataSection").DataSectionInitInfoArgs, import("../generated").BaseDataSectionInitInfoArgs, {
        key: import("./externalPluginAdapterKey").ExternalPluginAdapterKey;
    }, import("../generated").BaseDataSectionUpdateInfo>;
};
export type ExternalPluginAdapterData = {
    dataLen?: bigint;
    dataOffset?: bigint;
};
export declare function externalRegistryRecordsToExternalPluginAdapterList(records: ExternalRegistryRecord[], accountData: Uint8Array): ExternalPluginAdaptersList;
export declare const isExternalPluginAdapterType: (plugin: {
    type: string;
}) => boolean;
export declare function createExternalPluginAdapterInitInfo({ type, ...args }: ExternalPluginAdapterInitInfoArgs): BaseExternalPluginAdapterInitInfoArgs;
export declare function createExternalPluginAdapterUpdateInfo({ type, ...args }: ExternalPluginAdapterUpdateInfoArgs): BaseExternalPluginAdapterUpdateInfoArgs;
export declare const findExtraAccounts: (context: Pick<Context, 'eddsa'>, lifecycle: LifecycleEvent, externalPluginAdapters: ExternalPluginAdaptersList, inputs: {
    asset: PublicKey;
    collection?: PublicKey;
    owner: PublicKey;
    recipient?: PublicKey;
}) => AccountMeta[];
