import { BaseAppData, BaseAppDataInitInfoArgs, BaseAppDataUpdateInfoArgs, ExternalPluginAdapterSchema, ExternalRegistryRecord } from '../generated';
import { ExternalPluginAdapterKey } from './externalPluginAdapterKey';
import { ExternalPluginAdapterManifest } from './externalPluginAdapterManifest';
import { BaseExternalPluginAdapter } from './externalPluginAdapters';
import { LifecycleChecks } from './lifecycleChecks';
import { PluginAuthority } from './pluginAuthority';
export type AppData = Omit<BaseAppData, 'dataAuthority'> & {
    dataAuthority: PluginAuthority;
    data?: any;
};
export type AppDataPlugin = BaseExternalPluginAdapter & AppData & {
    type: 'AppData';
    dataAuthority: PluginAuthority;
};
export type AppDataInitInfoArgs = Omit<BaseAppDataInitInfoArgs, 'initPluginAuthority' | 'lifecycleChecks' | 'dataAuthority'> & {
    type: 'AppData';
    initPluginAuthority?: PluginAuthority;
    lifecycleChecks?: LifecycleChecks;
    schema?: ExternalPluginAdapterSchema;
    dataAuthority: PluginAuthority;
};
export type AppDataUpdateInfoArgs = Omit<BaseAppDataUpdateInfoArgs, 'schema'> & {
    key: ExternalPluginAdapterKey;
    schema?: ExternalPluginAdapterSchema;
};
export declare function appDataInitInfoArgsToBase(d: AppDataInitInfoArgs): BaseAppDataInitInfoArgs;
export declare function appDataUpdateInfoArgsToBase(d: AppDataUpdateInfoArgs): BaseAppDataUpdateInfoArgs;
export declare function appDataFromBase(s: BaseAppData, r: ExternalRegistryRecord, account: Uint8Array): AppData;
export declare const appDataManifest: ExternalPluginAdapterManifest<AppData, BaseAppData, AppDataInitInfoArgs, BaseAppDataInitInfoArgs, AppDataUpdateInfoArgs, BaseAppDataUpdateInfoArgs>;
