"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.thawAsset = exports.freezeAsset = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const generated_1 = require("../generated");
const helpers_1 = require("../helpers");
const plugins_1 = require("../plugins");
const authority_1 = require("../authority");
/**
 * Freezes an asset and assigns the freeze delegate to the given address
 * @param context Umi context
 * @param args FreezeAssetArgs
 * @returns TransactionBuilder
 */
function freezeAsset(context, { asset, authority, collection, delegate }) {
    if ((0, helpers_1.isFrozen)(asset, collection)) {
        throw new Error('Cannot freeze: asset is already frozen');
    }
    if (asset.freezeDelegate && asset.freezeDelegate.authority.type === 'None') {
        // not sure why this anyone would do this but we check it anyways
        throw new Error('Cannot freeze: owner has made the freeze immutable until transfer');
    }
    let txBuilder = (0, umi_1.transactionBuilder)();
    if (asset.freezeDelegate) {
        if (asset.freezeDelegate.authority.type !== 'Owner') {
            txBuilder = txBuilder.add((0, generated_1.revokePluginAuthorityV1)(context, {
                asset: asset.publicKey,
                collection: collection?.publicKey,
                pluginType: generated_1.PluginType.FreezeDelegate,
                authority,
            }));
        }
        txBuilder = txBuilder.add((0, generated_1.removePluginV1)(context, {
            asset: asset.publicKey,
            collection: collection?.publicKey,
            pluginType: generated_1.PluginType.FreezeDelegate,
            authority,
        }));
    }
    txBuilder = txBuilder.add((0, generated_1.addPluginV1)(context, {
        asset: asset.publicKey,
        collection: collection?.publicKey,
        plugin: (0, plugins_1.createPlugin)({
            type: 'FreezeDelegate',
            data: { frozen: true },
        }),
        initAuthority: (0, authority_1.addressPluginAuthority)((0, umi_1.publicKey)(delegate)),
        authority,
    }));
    return txBuilder;
}
exports.freezeAsset = freezeAsset;
/**
 * Thaws an asset and assigns the freeze delegate back to the owner
 * @param context Umi context
 * @param args ThawAssetArgs
 * @returns TransactionBuilder
 */
function thawAsset(context, { asset, delegate, collection }) {
    if (!(0, helpers_1.isFrozen)(asset, collection)) {
        throw new Error('Cannot thaw: asset is not frozen');
    }
    return (0, umi_1.transactionBuilder)()
        .add((0, generated_1.updatePluginV1)(context, {
        asset: asset.publicKey,
        collection: collection?.publicKey,
        plugin: (0, plugins_1.createPlugin)({
            type: 'FreezeDelegate',
            data: { frozen: false },
        }),
        authority: delegate,
    }))
        .add((0, generated_1.revokePluginAuthorityV1)(context, {
        asset: asset.publicKey,
        collection: collection?.publicKey,
        pluginType: generated_1.PluginType.FreezeDelegate,
        authority: delegate,
    }));
}
exports.thawAsset = thawAsset;
//# sourceMappingURL=freeze.js.map