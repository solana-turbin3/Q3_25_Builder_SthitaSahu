"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const generated_1 = require("../generated");
const plugins_1 = require("../plugins");
const helpers_1 = require("../helpers");
const externalPluginAdapters_1 = require("../plugins/externalPluginAdapters");
const create = (context, { asset, plugins, collection, ...args }) => {
    const owner = args.owner || args.updateAuthority || args.payer;
    const assetExternalPluginAdapters = {
        oracles: [],
        lifecycleHooks: [],
    };
    const externalPluginAdapters = [];
    const firstPartyPlugins = [];
    // Create dummy external plugin adapters to resuse findExtraAccounts method
    plugins?.forEach((plugin) => {
        if ((0, externalPluginAdapters_1.isExternalPluginAdapterType)(plugin)) {
            externalPluginAdapters.push(plugin);
            switch (plugin.type) {
                case 'Oracle':
                    assetExternalPluginAdapters.oracles?.push({
                        ...plugin,
                        resultsOffset: plugin.resultsOffset || { type: 'NoOffset' },
                        baseAddress: plugin.baseAddress,
                        authority: plugin.initPluginAuthority || {
                            type: 'UpdateAuthority',
                        },
                        type: 'Oracle',
                    });
                    break;
                case 'AppData':
                    // Do nothing, App Data has no extra accounts
                    break;
                case 'LifecycleHook':
                    assetExternalPluginAdapters.lifecycleHooks?.push({
                        ...plugin,
                        hookedProgram: plugin.hookedProgram,
                        authority: plugin.initPluginAuthority || {
                            type: 'UpdateAuthority',
                        },
                        type: 'LifecycleHook',
                        schema: plugin.schema || generated_1.ExternalPluginAdapterSchema.Binary,
                    });
                    break;
                default:
                // Do nothing
            }
        }
        else {
            firstPartyPlugins.push(plugin);
        }
    });
    const derivedExternalPluginAdapters = (0, helpers_1.deriveExternalPluginAdapters)(assetExternalPluginAdapters, collection);
    const extraAccounts = (0, plugins_1.findExtraAccounts)(context, 'create', derivedExternalPluginAdapters, {
        asset: asset.publicKey,
        collection: collection ? collection.publicKey : undefined,
        // need to replicate program behavior
        owner: owner ? (0, umi_1.publicKey)(owner) : context.identity.publicKey,
    });
    return (0, generated_1.createV2)(context, {
        ...args,
        plugins: firstPartyPlugins.map(plugins_1.pluginAuthorityPairV2),
        externalPluginAdapters: externalPluginAdapters.map(plugins_1.createExternalPluginAdapterInitInfo),
        asset,
        collection: collection ? collection.publicKey : undefined,
    }).addRemainingAccounts(extraAccounts);
};
exports.create = create;
//# sourceMappingURL=create.js.map