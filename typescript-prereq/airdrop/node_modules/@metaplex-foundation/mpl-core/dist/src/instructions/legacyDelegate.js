"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.legacyDelegate = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const errors_1 = require("./errors");
const generated_1 = require("../generated");
const plugins_1 = require("../plugins");
const authority_1 = require("../authority");
const approvePluginAuthority_1 = require("./approvePluginAuthority");
function legacyDelegate(context, asset, targetDelegate) {
    const definedPlugins = (({ freezeDelegate, transferDelegate, burnDelegate, }) => ({
        ...(freezeDelegate ? { freezeDelegate } : {}),
        ...(transferDelegate ? { transferDelegate } : {}),
        ...(burnDelegate ? { burnDelegate } : {}),
    }))(asset);
    const canDelegate = Object.values(definedPlugins).every((pluginValue) => {
        const assetOwner = asset.owner;
        const pluginAuthority = pluginValue.authority;
        const pluginAuthorityAddress = pluginAuthority.address;
        if (pluginAuthority.type === 'Owner')
            return targetDelegate !== assetOwner;
        return (pluginAuthorityAddress !== targetDelegate &&
            pluginAuthorityAddress !== assetOwner);
    });
    if (!canDelegate) {
        throw new Error(errors_1.ERR_CANNOT_DELEGATE);
    }
    let txBuilder = (0, umi_1.transactionBuilder)();
    const definedPluginsKeys = Object.keys(definedPlugins);
    // Change the plugin authority of the defined plugins.
    definedPluginsKeys.forEach((pluginKey) => {
        const plugType = (0, plugins_1.pluginKeyToPluginType)(pluginKey);
        txBuilder = txBuilder.add((0, approvePluginAuthority_1.approvePluginAuthority)(context, {
            asset: asset.publicKey,
            plugin: { type: plugType },
            newAuthority: {
                type: 'Address',
                address: targetDelegate,
            },
        }));
    });
    // Add missing plugins with a new plugin authority.
    const requiredPlugins = [
        'freezeDelegate',
        'transferDelegate',
        'burnDelegate',
    ];
    const missingPlugins = requiredPlugins.filter((requiredPlugin) => !definedPluginsKeys.includes(requiredPlugin));
    missingPlugins.forEach((missingPlugin) => {
        const plugin = (() => {
            if (missingPlugin === 'freezeDelegate') {
                return (0, plugins_1.createPlugin)({
                    type: 'FreezeDelegate',
                    data: { frozen: false },
                });
            }
            if (missingPlugin === 'transferDelegate') {
                return (0, plugins_1.createPlugin)({ type: 'TransferDelegate' });
            }
            return (0, plugins_1.createPlugin)({ type: 'BurnDelegate' });
        })();
        txBuilder = txBuilder.add((0, generated_1.addPluginV1)(context, {
            asset: asset.publicKey,
            plugin,
            initAuthority: (0, authority_1.addressPluginAuthority)(targetDelegate),
        }));
    });
    return txBuilder;
}
exports.legacyDelegate = legacyDelegate;
//# sourceMappingURL=legacyDelegate.js.map