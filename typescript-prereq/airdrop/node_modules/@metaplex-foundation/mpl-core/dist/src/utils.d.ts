import { Option } from '@metaplex-foundation/umi';
export type RenameField<T, K extends keyof T, R extends PropertyKey> = Omit<T, K> & (undefined extends T[K] ? {
    [P in R]?: T[K];
} : {
    [P in R]: T[K];
});
export type RenameToType<T extends {
    __kind: string;
}> = T extends T ? RenameField<T, '__kind', 'type'> : never;
export declare function toWords(str: string): string;
export declare function capitalizeFirstLetter(str: string): string;
export declare function lowercaseFirstLetter(str: string): string;
export declare function someOrNone<T>(value: T | undefined): Option<T>;
export declare function unwrapOption<T>(value: Option<T>): T | undefined;
