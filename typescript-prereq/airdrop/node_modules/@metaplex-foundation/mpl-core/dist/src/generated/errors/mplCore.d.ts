/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Program, ProgramError } from '@metaplex-foundation/umi';
/** InvalidSystemProgram: Invalid System Program */
export declare class InvalidSystemProgramError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** DeserializationError: Error deserializing account */
export declare class DeserializationErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** SerializationError: Error serializing account */
export declare class SerializationErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** PluginsNotInitialized: Plugins not initialized */
export declare class PluginsNotInitializedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** PluginNotFound: Plugin not found */
export declare class PluginNotFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NumericalOverflow: Numerical Overflow */
export declare class NumericalOverflowError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IncorrectAccount: Incorrect account */
export declare class IncorrectAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IncorrectAssetHash: Incorrect asset hash */
export declare class IncorrectAssetHashError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidPlugin: Invalid Plugin */
export declare class InvalidPluginError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidAuthority: Invalid Authority */
export declare class InvalidAuthorityError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AssetIsFrozen: Cannot transfer a frozen asset */
export declare class AssetIsFrozenError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingCompressionProof: Missing compression proof */
export declare class MissingCompressionProofError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotMigrateMasterWithSupply: Cannot migrate a master edition used for prints */
export declare class CannotMigrateMasterWithSupplyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotMigratePrints: Cannot migrate a print edition */
export declare class CannotMigratePrintsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotBurnCollection: Cannot burn a collection NFT */
export declare class CannotBurnCollectionError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** PluginAlreadyExists: Plugin already exists */
export declare class PluginAlreadyExistsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NumericalOverflowError: Numerical overflow */
export declare class NumericalOverflowErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AlreadyCompressed: Already compressed account */
export declare class AlreadyCompressedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AlreadyDecompressed: Already decompressed account */
export declare class AlreadyDecompressedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidCollection: Invalid Collection passed in */
export declare class InvalidCollectionError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingUpdateAuthority: Missing update authority */
export declare class MissingUpdateAuthorityError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingNewOwner: Missing new owner */
export declare class MissingNewOwnerError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingSystemProgram: Missing system program */
export declare class MissingSystemProgramError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NotAvailable: Feature not available */
export declare class NotAvailableError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidAsset: Invalid Asset passed in */
export declare class InvalidAssetError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingCollection: Missing collection */
export declare class MissingCollectionError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NoApprovals: Neither the asset or any plugins have approved this operation */
export declare class NoApprovalsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotRedelegate: Plugin Manager cannot redelegate a delegated plugin without revoking first */
export declare class CannotRedelegateError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidPluginSetting: Invalid setting for plugin */
export declare class InvalidPluginSettingError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ConflictingAuthority: Cannot specify both an update authority and collection on an asset */
export declare class ConflictingAuthorityError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidLogWrapperProgram: Invalid Log Wrapper Program */
export declare class InvalidLogWrapperProgramError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ExternalPluginAdapterNotFound: External Plugin Adapter not found */
export declare class ExternalPluginAdapterNotFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ExternalPluginAdapterAlreadyExists: External Plugin Adapter already exists */
export declare class ExternalPluginAdapterAlreadyExistsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingAsset: Missing asset needed for extra account PDA derivation */
export declare class MissingAssetError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingExternalPluginAdapterAccount: Missing account needed for external plugin adapter */
export declare class MissingExternalPluginAdapterAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** OracleCanRejectOnly: Oracle external plugin adapter can only be configured to reject */
export declare class OracleCanRejectOnlyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** RequiresLifecycleCheck: External plugin adapter must have at least one lifecycle check */
export declare class RequiresLifecycleCheckError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** DuplicateLifecycleChecks: Duplicate lifecycle checks were provided for external plugin adapter  */
export declare class DuplicateLifecycleChecksError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidOracleAccountData: Could not read from oracle account */
export declare class InvalidOracleAccountDataError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** UninitializedOracleAccount: Oracle account is uninitialized */
export declare class UninitializedOracleAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingSigner: Missing required signer for operation */
export declare class MissingSignerError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidPluginOperation: Invalid plugin operation */
export declare class InvalidPluginOperationError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CollectionMustBeEmpty: Collection must be empty to be burned */
export declare class CollectionMustBeEmptyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** TwoDataSources: Two data sources provided, only one is allowed */
export declare class TwoDataSourcesError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** UnsupportedOperation: External Plugin does not support this operation */
export declare class UnsupportedOperationError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NoDataSources: No data sources provided, one is required */
export declare class NoDataSourcesError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidPluginAdapterTarget: This plugin adapter cannot be added to an Asset */
export declare class InvalidPluginAdapterTargetError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotAddDataSection: Cannot add a Data Section without a linked external plugin */
export declare class CannotAddDataSectionError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** PermanentDelegatesPreventMove: Cannot move asset to collection with permanent delegates */
export declare class PermanentDelegatesPreventMoveError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidExecutePda: Invalid Signing PDA for Asset or Collection Execute */
export declare class InvalidExecutePdaError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** BlockedByBubblegumV2: Bubblegum V2 Plugin limits other plugins */
export declare class BlockedByBubblegumV2Error extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export declare function getMplCoreErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export declare function getMplCoreErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null;
