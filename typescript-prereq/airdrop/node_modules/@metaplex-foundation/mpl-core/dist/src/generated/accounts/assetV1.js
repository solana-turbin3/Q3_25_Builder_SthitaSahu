"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAssetV1GpaBuilder = exports.safeFetchAllAssetV1 = exports.fetchAllAssetV1 = exports.safeFetchAssetV1 = exports.fetchAssetV1 = exports.deserializeAssetV1 = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const types_1 = require("../types");
function deserializeAssetV1(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, (0, hooked_1.getAssetV1AccountDataSerializer)());
}
exports.deserializeAssetV1 = deserializeAssetV1;
async function fetchAssetV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'AssetV1');
    return deserializeAssetV1(maybeAccount);
}
exports.fetchAssetV1 = fetchAssetV1;
async function safeFetchAssetV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeAssetV1(maybeAccount) : null;
}
exports.safeFetchAssetV1 = safeFetchAssetV1;
async function fetchAllAssetV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'AssetV1');
        return deserializeAssetV1(maybeAccount);
    });
}
exports.fetchAllAssetV1 = fetchAllAssetV1;
async function safeFetchAllAssetV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeAssetV1(maybeAccount));
}
exports.safeFetchAllAssetV1 = safeFetchAllAssetV1;
function getAssetV1GpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCore', 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1.getKeySerializer)()],
        owner: [1, (0, serializers_1.publicKey)()],
        updateAuthority: [33, (0, types_1.getBaseUpdateAuthoritySerializer)()],
        name: [null, (0, serializers_1.string)()],
        uri: [null, (0, serializers_1.string)()],
        seq: [null, (0, serializers_1.option)((0, serializers_1.u64)())],
    })
        .deserializeUsing((account) => deserializeAssetV1(account));
}
exports.getAssetV1GpaBuilder = getAssetV1GpaBuilder;
//# sourceMappingURL=assetV1.js.map