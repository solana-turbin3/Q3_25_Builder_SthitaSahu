/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type AssetSigner = Account<AssetSignerAccountData>;
export type AssetSignerAccountData = {
    data: Uint8Array;
};
export type AssetSignerAccountDataArgs = AssetSignerAccountData;
export declare function getAssetSignerAccountDataSerializer(): Serializer<AssetSignerAccountDataArgs, AssetSignerAccountData>;
export declare function deserializeAssetSigner(rawAccount: RpcAccount): AssetSigner;
export declare function fetchAssetSigner(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<AssetSigner>;
export declare function safeFetchAssetSigner(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<AssetSigner | null>;
export declare function fetchAllAssetSigner(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<AssetSigner[]>;
export declare function safeFetchAllAssetSigner(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<AssetSigner[]>;
export declare function getAssetSignerGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<AssetSigner, {
    data: Uint8Array;
}>;
export declare function getAssetSignerSize(): number;
export declare function findAssetSignerPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    /** The address of the asset account */
    asset: PublicKey;
}): Pda;
export declare function fetchAssetSignerFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findAssetSignerPda>[1], options?: RpcGetAccountOptions): Promise<AssetSigner>;
export declare function safeFetchAssetSignerFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findAssetSignerPda>[1], options?: RpcGetAccountOptions): Promise<AssetSigner | null>;
