"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPluginHeaderV1Size = exports.getPluginHeaderV1GpaBuilder = exports.safeFetchAllPluginHeaderV1 = exports.fetchAllPluginHeaderV1 = exports.safeFetchPluginHeaderV1 = exports.fetchPluginHeaderV1 = exports.deserializePluginHeaderV1 = exports.getPluginHeaderV1AccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const types_1 = require("../types");
function getPluginHeaderV1AccountDataSerializer() {
    return (0, serializers_1.struct)([
        ['key', (0, types_1.getKeySerializer)()],
        ['pluginRegistryOffset', (0, serializers_1.u64)()],
    ], { description: 'PluginHeaderV1AccountData' });
}
exports.getPluginHeaderV1AccountDataSerializer = getPluginHeaderV1AccountDataSerializer;
function deserializePluginHeaderV1(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getPluginHeaderV1AccountDataSerializer());
}
exports.deserializePluginHeaderV1 = deserializePluginHeaderV1;
async function fetchPluginHeaderV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'PluginHeaderV1');
    return deserializePluginHeaderV1(maybeAccount);
}
exports.fetchPluginHeaderV1 = fetchPluginHeaderV1;
async function safeFetchPluginHeaderV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializePluginHeaderV1(maybeAccount) : null;
}
exports.safeFetchPluginHeaderV1 = safeFetchPluginHeaderV1;
async function fetchAllPluginHeaderV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'PluginHeaderV1');
        return deserializePluginHeaderV1(maybeAccount);
    });
}
exports.fetchAllPluginHeaderV1 = fetchAllPluginHeaderV1;
async function safeFetchAllPluginHeaderV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializePluginHeaderV1(maybeAccount));
}
exports.safeFetchAllPluginHeaderV1 = safeFetchAllPluginHeaderV1;
function getPluginHeaderV1GpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCore', 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1.getKeySerializer)()],
        pluginRegistryOffset: [1, (0, serializers_1.u64)()],
    })
        .deserializeUsing((account) => deserializePluginHeaderV1(account));
}
exports.getPluginHeaderV1GpaBuilder = getPluginHeaderV1GpaBuilder;
function getPluginHeaderV1Size() {
    return 9;
}
exports.getPluginHeaderV1Size = getPluginHeaderV1Size;
//# sourceMappingURL=pluginHeaderV1.js.map