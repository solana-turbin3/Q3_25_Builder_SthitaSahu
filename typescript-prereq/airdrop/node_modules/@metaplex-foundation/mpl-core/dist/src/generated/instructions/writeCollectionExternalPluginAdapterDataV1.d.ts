/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { BaseExternalPluginAdapterKey, BaseExternalPluginAdapterKeyArgs } from '../types';
export type WriteCollectionExternalPluginAdapterDataV1InstructionAccounts = {
    /** The address of the asset */
    collection: PublicKey | Pda;
    /** The account paying for the storage fees */
    payer?: Signer;
    /** The Data Authority of the External Plugin Adapter */
    authority?: Signer;
    /** The buffer to write to the external plugin */
    buffer?: PublicKey | Pda;
    /** The system program */
    systemProgram?: PublicKey | Pda;
    /** The SPL Noop Program */
    logWrapper?: PublicKey | Pda;
};
export type WriteCollectionExternalPluginAdapterDataV1InstructionData = {
    discriminator: number;
    key: BaseExternalPluginAdapterKey;
    data: Option<Uint8Array>;
};
export type WriteCollectionExternalPluginAdapterDataV1InstructionDataArgs = {
    key: BaseExternalPluginAdapterKeyArgs;
    data: OptionOrNullable<Uint8Array>;
};
export declare function getWriteCollectionExternalPluginAdapterDataV1InstructionDataSerializer(): Serializer<WriteCollectionExternalPluginAdapterDataV1InstructionDataArgs, WriteCollectionExternalPluginAdapterDataV1InstructionData>;
export type WriteCollectionExternalPluginAdapterDataV1InstructionArgs = WriteCollectionExternalPluginAdapterDataV1InstructionDataArgs;
export declare function writeCollectionExternalPluginAdapterDataV1(context: Pick<Context, 'payer' | 'programs'>, input: WriteCollectionExternalPluginAdapterDataV1InstructionAccounts & WriteCollectionExternalPluginAdapterDataV1InstructionArgs): TransactionBuilder;
