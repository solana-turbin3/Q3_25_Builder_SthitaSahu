/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { BaseUpdateAuthority, BaseUpdateAuthorityArgs } from '../types';
export type UpdateV1InstructionAccounts = {
    /** The address of the asset */
    asset: PublicKey | Pda;
    /** The collection to which the asset belongs */
    collection?: PublicKey | Pda;
    /** The account paying for the storage fees */
    payer?: Signer;
    /** The update authority or update authority delegate of the asset */
    authority?: Signer;
    /** The system program */
    systemProgram?: PublicKey | Pda;
    /** The SPL Noop Program */
    logWrapper?: PublicKey | Pda;
};
export type UpdateV1InstructionData = {
    discriminator: number;
    newName: Option<string>;
    newUri: Option<string>;
    newUpdateAuthority: Option<BaseUpdateAuthority>;
};
export type UpdateV1InstructionDataArgs = {
    newName?: OptionOrNullable<string>;
    newUri?: OptionOrNullable<string>;
    newUpdateAuthority?: OptionOrNullable<BaseUpdateAuthorityArgs>;
};
export declare function getUpdateV1InstructionDataSerializer(): Serializer<UpdateV1InstructionDataArgs, UpdateV1InstructionData>;
export type UpdateV1InstructionArgs = UpdateV1InstructionDataArgs;
export declare function updateV1(context: Pick<Context, 'payer' | 'programs'>, input: UpdateV1InstructionAccounts & UpdateV1InstructionArgs): TransactionBuilder;
