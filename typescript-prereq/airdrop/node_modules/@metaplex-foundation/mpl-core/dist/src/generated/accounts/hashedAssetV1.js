"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHashedAssetV1Size = exports.getHashedAssetV1GpaBuilder = exports.safeFetchAllHashedAssetV1 = exports.fetchAllHashedAssetV1 = exports.safeFetchHashedAssetV1 = exports.fetchHashedAssetV1 = exports.deserializeHashedAssetV1 = exports.getHashedAssetV1AccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const types_1 = require("../types");
function getHashedAssetV1AccountDataSerializer() {
    return (0, serializers_1.struct)([
        ['key', (0, types_1.getKeySerializer)()],
        ['hash', (0, serializers_1.bytes)({ size: 32 })],
    ], { description: 'HashedAssetV1AccountData' });
}
exports.getHashedAssetV1AccountDataSerializer = getHashedAssetV1AccountDataSerializer;
function deserializeHashedAssetV1(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getHashedAssetV1AccountDataSerializer());
}
exports.deserializeHashedAssetV1 = deserializeHashedAssetV1;
async function fetchHashedAssetV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'HashedAssetV1');
    return deserializeHashedAssetV1(maybeAccount);
}
exports.fetchHashedAssetV1 = fetchHashedAssetV1;
async function safeFetchHashedAssetV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeHashedAssetV1(maybeAccount) : null;
}
exports.safeFetchHashedAssetV1 = safeFetchHashedAssetV1;
async function fetchAllHashedAssetV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'HashedAssetV1');
        return deserializeHashedAssetV1(maybeAccount);
    });
}
exports.fetchAllHashedAssetV1 = fetchAllHashedAssetV1;
async function safeFetchAllHashedAssetV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeHashedAssetV1(maybeAccount));
}
exports.safeFetchAllHashedAssetV1 = safeFetchAllHashedAssetV1;
function getHashedAssetV1GpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCore', 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1.getKeySerializer)()],
        hash: [1, (0, serializers_1.bytes)({ size: 32 })],
    })
        .deserializeUsing((account) => deserializeHashedAssetV1(account));
}
exports.getHashedAssetV1GpaBuilder = getHashedAssetV1GpaBuilder;
function getHashedAssetV1Size() {
    return 33;
}
exports.getHashedAssetV1Size = getHashedAssetV1Size;
//# sourceMappingURL=hashedAssetV1.js.map