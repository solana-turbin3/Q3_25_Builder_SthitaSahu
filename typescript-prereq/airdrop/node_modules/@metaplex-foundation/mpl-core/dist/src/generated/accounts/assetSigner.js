"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchAssetSignerFromSeeds = exports.fetchAssetSignerFromSeeds = exports.findAssetSignerPda = exports.getAssetSignerSize = exports.getAssetSignerGpaBuilder = exports.safeFetchAllAssetSigner = exports.fetchAllAssetSigner = exports.safeFetchAssetSigner = exports.fetchAssetSigner = exports.deserializeAssetSigner = exports.getAssetSignerAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getAssetSignerAccountDataSerializer() {
    return (0, serializers_1.struct)([['data', (0, serializers_1.bytes)()]], {
        description: 'AssetSignerAccountData',
    });
}
exports.getAssetSignerAccountDataSerializer = getAssetSignerAccountDataSerializer;
function deserializeAssetSigner(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getAssetSignerAccountDataSerializer());
}
exports.deserializeAssetSigner = deserializeAssetSigner;
async function fetchAssetSigner(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'AssetSigner');
    return deserializeAssetSigner(maybeAccount);
}
exports.fetchAssetSigner = fetchAssetSigner;
async function safeFetchAssetSigner(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeAssetSigner(maybeAccount) : null;
}
exports.safeFetchAssetSigner = safeFetchAssetSigner;
async function fetchAllAssetSigner(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'AssetSigner');
        return deserializeAssetSigner(maybeAccount);
    });
}
exports.fetchAllAssetSigner = fetchAllAssetSigner;
async function safeFetchAllAssetSigner(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeAssetSigner(maybeAccount));
}
exports.safeFetchAllAssetSigner = safeFetchAllAssetSigner;
function getAssetSignerGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCore', 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({ data: [0, (0, serializers_1.bytes)()] })
        .deserializeUsing((account) => deserializeAssetSigner(account));
}
exports.getAssetSignerGpaBuilder = getAssetSignerGpaBuilder;
function getAssetSignerSize() {
    return 0;
}
exports.getAssetSignerSize = getAssetSignerSize;
function findAssetSignerPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplCore', 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('mpl-core-execute'),
        (0, serializers_1.publicKey)().serialize(seeds.asset),
    ]);
}
exports.findAssetSignerPda = findAssetSignerPda;
async function fetchAssetSignerFromSeeds(context, seeds, options) {
    return fetchAssetSigner(context, findAssetSignerPda(context, seeds), options);
}
exports.fetchAssetSignerFromSeeds = fetchAssetSignerFromSeeds;
async function safeFetchAssetSignerFromSeeds(context, seeds, options) {
    return safeFetchAssetSigner(context, findAssetSignerPda(context, seeds), options);
}
exports.safeFetchAssetSignerFromSeeds = safeFetchAssetSignerFromSeeds;
//# sourceMappingURL=assetSigner.js.map