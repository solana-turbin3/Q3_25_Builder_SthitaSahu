"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.collect = exports.getCollectInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getCollectInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
        description: 'CollectInstructionData',
    }), (value) => ({ ...value, discriminator: 19 }));
}
exports.getCollectInstructionDataSerializer = getCollectInstructionDataSerializer;
// Instruction.
function collect(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplCore', 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d');
    // Accounts.
    const resolvedAccounts = {
        recipient1: {
            index: 0,
            isWritable: true,
            value: input.recipient1 ?? null,
        },
        recipient2: {
            index: 1,
            isWritable: true,
            value: input.recipient2 ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.recipient1.value) {
        resolvedAccounts.recipient1.value = (0, umi_1.publicKey)('8AT6o8Qk5T9QnZvPThMrF9bcCQLTGkyGvVZZzHgCw11v');
    }
    if (!resolvedAccounts.recipient2.value) {
        resolvedAccounts.recipient2.value = (0, umi_1.publicKey)('MmHsqX4LxTfifxoH8BVRLUKrwDn1LPCac6YcCZTHhwt');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCollectInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.collect = collect;
//# sourceMappingURL=collect.js.map