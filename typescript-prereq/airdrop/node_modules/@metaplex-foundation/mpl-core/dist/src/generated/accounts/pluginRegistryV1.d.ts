/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { PluginRegistryV1AccountData } from '../../hooked';
import { ExternalRegistryRecordArgs, KeyArgs, RegistryRecordArgs } from '../types';
export type PluginRegistryV1 = Account<PluginRegistryV1AccountData>;
export declare function deserializePluginRegistryV1(rawAccount: RpcAccount): PluginRegistryV1;
export declare function fetchPluginRegistryV1(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<PluginRegistryV1>;
export declare function safeFetchPluginRegistryV1(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<PluginRegistryV1 | null>;
export declare function fetchAllPluginRegistryV1(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<PluginRegistryV1[]>;
export declare function safeFetchAllPluginRegistryV1(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<PluginRegistryV1[]>;
export declare function getPluginRegistryV1GpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<PluginRegistryV1, {
    key: KeyArgs;
    registry: Array<RegistryRecordArgs>;
    externalRegistry: Array<ExternalRegistryRecordArgs>;
}>;
