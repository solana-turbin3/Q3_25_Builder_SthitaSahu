"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCollectionV1GpaBuilder = exports.safeFetchAllCollectionV1 = exports.fetchAllCollectionV1 = exports.safeFetchCollectionV1 = exports.fetchCollectionV1 = exports.deserializeCollectionV1 = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const types_1 = require("../types");
function deserializeCollectionV1(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, (0, hooked_1.getCollectionV1AccountDataSerializer)());
}
exports.deserializeCollectionV1 = deserializeCollectionV1;
async function fetchCollectionV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'CollectionV1');
    return deserializeCollectionV1(maybeAccount);
}
exports.fetchCollectionV1 = fetchCollectionV1;
async function safeFetchCollectionV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeCollectionV1(maybeAccount) : null;
}
exports.safeFetchCollectionV1 = safeFetchCollectionV1;
async function fetchAllCollectionV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'CollectionV1');
        return deserializeCollectionV1(maybeAccount);
    });
}
exports.fetchAllCollectionV1 = fetchAllCollectionV1;
async function safeFetchAllCollectionV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeCollectionV1(maybeAccount));
}
exports.safeFetchAllCollectionV1 = safeFetchAllCollectionV1;
function getCollectionV1GpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCore', 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1.getKeySerializer)()],
        updateAuthority: [1, (0, serializers_1.publicKey)()],
        name: [33, (0, serializers_1.string)()],
        uri: [null, (0, serializers_1.string)()],
        numMinted: [null, (0, serializers_1.u32)()],
        currentSize: [null, (0, serializers_1.u32)()],
    })
        .deserializeUsing((account) => deserializeCollectionV1(account));
}
exports.getCollectionV1GpaBuilder = getCollectionV1GpaBuilder;
//# sourceMappingURL=collectionV1.js.map