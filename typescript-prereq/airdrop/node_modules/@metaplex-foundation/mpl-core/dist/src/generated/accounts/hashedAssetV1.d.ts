/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs } from '../types';
export type HashedAssetV1 = Account<HashedAssetV1AccountData>;
export type HashedAssetV1AccountData = {
    key: Key;
    hash: Uint8Array;
};
export type HashedAssetV1AccountDataArgs = {
    key: KeyArgs;
    hash: Uint8Array;
};
export declare function getHashedAssetV1AccountDataSerializer(): Serializer<HashedAssetV1AccountDataArgs, HashedAssetV1AccountData>;
export declare function deserializeHashedAssetV1(rawAccount: RpcAccount): HashedAssetV1;
export declare function fetchHashedAssetV1(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<HashedAssetV1>;
export declare function safeFetchHashedAssetV1(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<HashedAssetV1 | null>;
export declare function fetchAllHashedAssetV1(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<HashedAssetV1[]>;
export declare function safeFetchAllHashedAssetV1(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<HashedAssetV1[]>;
export declare function getHashedAssetV1GpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<HashedAssetV1, {
    key: KeyArgs;
    hash: Uint8Array;
}>;
export declare function getHashedAssetV1Size(): number;
