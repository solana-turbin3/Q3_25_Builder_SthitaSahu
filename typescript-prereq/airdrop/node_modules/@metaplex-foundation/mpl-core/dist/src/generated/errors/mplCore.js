"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidExecutePdaError = exports.PermanentDelegatesPreventMoveError = exports.CannotAddDataSectionError = exports.InvalidPluginAdapterTargetError = exports.NoDataSourcesError = exports.UnsupportedOperationError = exports.TwoDataSourcesError = exports.CollectionMustBeEmptyError = exports.InvalidPluginOperationError = exports.MissingSignerError = exports.UninitializedOracleAccountError = exports.InvalidOracleAccountDataError = exports.DuplicateLifecycleChecksError = exports.RequiresLifecycleCheckError = exports.OracleCanRejectOnlyError = exports.MissingExternalPluginAdapterAccountError = exports.MissingAssetError = exports.ExternalPluginAdapterAlreadyExistsError = exports.ExternalPluginAdapterNotFoundError = exports.InvalidLogWrapperProgramError = exports.ConflictingAuthorityError = exports.InvalidPluginSettingError = exports.CannotRedelegateError = exports.NoApprovalsError = exports.MissingCollectionError = exports.InvalidAssetError = exports.NotAvailableError = exports.MissingSystemProgramError = exports.MissingNewOwnerError = exports.MissingUpdateAuthorityError = exports.InvalidCollectionError = exports.AlreadyDecompressedError = exports.AlreadyCompressedError = exports.NumericalOverflowErrorError = exports.PluginAlreadyExistsError = exports.CannotBurnCollectionError = exports.CannotMigratePrintsError = exports.CannotMigrateMasterWithSupplyError = exports.MissingCompressionProofError = exports.AssetIsFrozenError = exports.InvalidAuthorityError = exports.InvalidPluginError = exports.IncorrectAssetHashError = exports.IncorrectAccountError = exports.NumericalOverflowError = exports.PluginNotFoundError = exports.PluginsNotInitializedError = exports.SerializationErrorError = exports.DeserializationErrorError = exports.InvalidSystemProgramError = void 0;
exports.getMplCoreErrorFromName = exports.getMplCoreErrorFromCode = exports.BlockedByBubblegumV2Error = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const codeToErrorMap = new Map();
const nameToErrorMap = new Map();
/** InvalidSystemProgram: Invalid System Program */
class InvalidSystemProgramError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid System Program', program, cause);
        this.name = 'InvalidSystemProgram';
        this.code = 0x0; // 0
    }
}
exports.InvalidSystemProgramError = InvalidSystemProgramError;
codeToErrorMap.set(0x0, InvalidSystemProgramError);
nameToErrorMap.set('InvalidSystemProgram', InvalidSystemProgramError);
/** DeserializationError: Error deserializing account */
class DeserializationErrorError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Error deserializing account', program, cause);
        this.name = 'DeserializationError';
        this.code = 0x1; // 1
    }
}
exports.DeserializationErrorError = DeserializationErrorError;
codeToErrorMap.set(0x1, DeserializationErrorError);
nameToErrorMap.set('DeserializationError', DeserializationErrorError);
/** SerializationError: Error serializing account */
class SerializationErrorError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Error serializing account', program, cause);
        this.name = 'SerializationError';
        this.code = 0x2; // 2
    }
}
exports.SerializationErrorError = SerializationErrorError;
codeToErrorMap.set(0x2, SerializationErrorError);
nameToErrorMap.set('SerializationError', SerializationErrorError);
/** PluginsNotInitialized: Plugins not initialized */
class PluginsNotInitializedError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Plugins not initialized', program, cause);
        this.name = 'PluginsNotInitialized';
        this.code = 0x3; // 3
    }
}
exports.PluginsNotInitializedError = PluginsNotInitializedError;
codeToErrorMap.set(0x3, PluginsNotInitializedError);
nameToErrorMap.set('PluginsNotInitialized', PluginsNotInitializedError);
/** PluginNotFound: Plugin not found */
class PluginNotFoundError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Plugin not found', program, cause);
        this.name = 'PluginNotFound';
        this.code = 0x4; // 4
    }
}
exports.PluginNotFoundError = PluginNotFoundError;
codeToErrorMap.set(0x4, PluginNotFoundError);
nameToErrorMap.set('PluginNotFound', PluginNotFoundError);
/** NumericalOverflow: Numerical Overflow */
class NumericalOverflowError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Numerical Overflow', program, cause);
        this.name = 'NumericalOverflow';
        this.code = 0x5; // 5
    }
}
exports.NumericalOverflowError = NumericalOverflowError;
codeToErrorMap.set(0x5, NumericalOverflowError);
nameToErrorMap.set('NumericalOverflow', NumericalOverflowError);
/** IncorrectAccount: Incorrect account */
class IncorrectAccountError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Incorrect account', program, cause);
        this.name = 'IncorrectAccount';
        this.code = 0x6; // 6
    }
}
exports.IncorrectAccountError = IncorrectAccountError;
codeToErrorMap.set(0x6, IncorrectAccountError);
nameToErrorMap.set('IncorrectAccount', IncorrectAccountError);
/** IncorrectAssetHash: Incorrect asset hash */
class IncorrectAssetHashError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Incorrect asset hash', program, cause);
        this.name = 'IncorrectAssetHash';
        this.code = 0x7; // 7
    }
}
exports.IncorrectAssetHashError = IncorrectAssetHashError;
codeToErrorMap.set(0x7, IncorrectAssetHashError);
nameToErrorMap.set('IncorrectAssetHash', IncorrectAssetHashError);
/** InvalidPlugin: Invalid Plugin */
class InvalidPluginError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Plugin', program, cause);
        this.name = 'InvalidPlugin';
        this.code = 0x8; // 8
    }
}
exports.InvalidPluginError = InvalidPluginError;
codeToErrorMap.set(0x8, InvalidPluginError);
nameToErrorMap.set('InvalidPlugin', InvalidPluginError);
/** InvalidAuthority: Invalid Authority */
class InvalidAuthorityError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Authority', program, cause);
        this.name = 'InvalidAuthority';
        this.code = 0x9; // 9
    }
}
exports.InvalidAuthorityError = InvalidAuthorityError;
codeToErrorMap.set(0x9, InvalidAuthorityError);
nameToErrorMap.set('InvalidAuthority', InvalidAuthorityError);
/** AssetIsFrozen: Cannot transfer a frozen asset */
class AssetIsFrozenError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot transfer a frozen asset', program, cause);
        this.name = 'AssetIsFrozen';
        this.code = 0xa; // 10
    }
}
exports.AssetIsFrozenError = AssetIsFrozenError;
codeToErrorMap.set(0xa, AssetIsFrozenError);
nameToErrorMap.set('AssetIsFrozen', AssetIsFrozenError);
/** MissingCompressionProof: Missing compression proof */
class MissingCompressionProofError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing compression proof', program, cause);
        this.name = 'MissingCompressionProof';
        this.code = 0xb; // 11
    }
}
exports.MissingCompressionProofError = MissingCompressionProofError;
codeToErrorMap.set(0xb, MissingCompressionProofError);
nameToErrorMap.set('MissingCompressionProof', MissingCompressionProofError);
/** CannotMigrateMasterWithSupply: Cannot migrate a master edition used for prints */
class CannotMigrateMasterWithSupplyError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot migrate a master edition used for prints', program, cause);
        this.name = 'CannotMigrateMasterWithSupply';
        this.code = 0xc; // 12
    }
}
exports.CannotMigrateMasterWithSupplyError = CannotMigrateMasterWithSupplyError;
codeToErrorMap.set(0xc, CannotMigrateMasterWithSupplyError);
nameToErrorMap.set('CannotMigrateMasterWithSupply', CannotMigrateMasterWithSupplyError);
/** CannotMigratePrints: Cannot migrate a print edition */
class CannotMigratePrintsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot migrate a print edition', program, cause);
        this.name = 'CannotMigratePrints';
        this.code = 0xd; // 13
    }
}
exports.CannotMigratePrintsError = CannotMigratePrintsError;
codeToErrorMap.set(0xd, CannotMigratePrintsError);
nameToErrorMap.set('CannotMigratePrints', CannotMigratePrintsError);
/** CannotBurnCollection: Cannot burn a collection NFT */
class CannotBurnCollectionError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot burn a collection NFT', program, cause);
        this.name = 'CannotBurnCollection';
        this.code = 0xe; // 14
    }
}
exports.CannotBurnCollectionError = CannotBurnCollectionError;
codeToErrorMap.set(0xe, CannotBurnCollectionError);
nameToErrorMap.set('CannotBurnCollection', CannotBurnCollectionError);
/** PluginAlreadyExists: Plugin already exists */
class PluginAlreadyExistsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Plugin already exists', program, cause);
        this.name = 'PluginAlreadyExists';
        this.code = 0xf; // 15
    }
}
exports.PluginAlreadyExistsError = PluginAlreadyExistsError;
codeToErrorMap.set(0xf, PluginAlreadyExistsError);
nameToErrorMap.set('PluginAlreadyExists', PluginAlreadyExistsError);
/** NumericalOverflowError: Numerical overflow */
class NumericalOverflowErrorError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Numerical overflow', program, cause);
        this.name = 'NumericalOverflowError';
        this.code = 0x10; // 16
    }
}
exports.NumericalOverflowErrorError = NumericalOverflowErrorError;
codeToErrorMap.set(0x10, NumericalOverflowErrorError);
nameToErrorMap.set('NumericalOverflowError', NumericalOverflowErrorError);
/** AlreadyCompressed: Already compressed account */
class AlreadyCompressedError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Already compressed account', program, cause);
        this.name = 'AlreadyCompressed';
        this.code = 0x11; // 17
    }
}
exports.AlreadyCompressedError = AlreadyCompressedError;
codeToErrorMap.set(0x11, AlreadyCompressedError);
nameToErrorMap.set('AlreadyCompressed', AlreadyCompressedError);
/** AlreadyDecompressed: Already decompressed account */
class AlreadyDecompressedError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Already decompressed account', program, cause);
        this.name = 'AlreadyDecompressed';
        this.code = 0x12; // 18
    }
}
exports.AlreadyDecompressedError = AlreadyDecompressedError;
codeToErrorMap.set(0x12, AlreadyDecompressedError);
nameToErrorMap.set('AlreadyDecompressed', AlreadyDecompressedError);
/** InvalidCollection: Invalid Collection passed in */
class InvalidCollectionError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Collection passed in', program, cause);
        this.name = 'InvalidCollection';
        this.code = 0x13; // 19
    }
}
exports.InvalidCollectionError = InvalidCollectionError;
codeToErrorMap.set(0x13, InvalidCollectionError);
nameToErrorMap.set('InvalidCollection', InvalidCollectionError);
/** MissingUpdateAuthority: Missing update authority */
class MissingUpdateAuthorityError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing update authority', program, cause);
        this.name = 'MissingUpdateAuthority';
        this.code = 0x14; // 20
    }
}
exports.MissingUpdateAuthorityError = MissingUpdateAuthorityError;
codeToErrorMap.set(0x14, MissingUpdateAuthorityError);
nameToErrorMap.set('MissingUpdateAuthority', MissingUpdateAuthorityError);
/** MissingNewOwner: Missing new owner */
class MissingNewOwnerError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing new owner', program, cause);
        this.name = 'MissingNewOwner';
        this.code = 0x15; // 21
    }
}
exports.MissingNewOwnerError = MissingNewOwnerError;
codeToErrorMap.set(0x15, MissingNewOwnerError);
nameToErrorMap.set('MissingNewOwner', MissingNewOwnerError);
/** MissingSystemProgram: Missing system program */
class MissingSystemProgramError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing system program', program, cause);
        this.name = 'MissingSystemProgram';
        this.code = 0x16; // 22
    }
}
exports.MissingSystemProgramError = MissingSystemProgramError;
codeToErrorMap.set(0x16, MissingSystemProgramError);
nameToErrorMap.set('MissingSystemProgram', MissingSystemProgramError);
/** NotAvailable: Feature not available */
class NotAvailableError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Feature not available', program, cause);
        this.name = 'NotAvailable';
        this.code = 0x17; // 23
    }
}
exports.NotAvailableError = NotAvailableError;
codeToErrorMap.set(0x17, NotAvailableError);
nameToErrorMap.set('NotAvailable', NotAvailableError);
/** InvalidAsset: Invalid Asset passed in */
class InvalidAssetError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Asset passed in', program, cause);
        this.name = 'InvalidAsset';
        this.code = 0x18; // 24
    }
}
exports.InvalidAssetError = InvalidAssetError;
codeToErrorMap.set(0x18, InvalidAssetError);
nameToErrorMap.set('InvalidAsset', InvalidAssetError);
/** MissingCollection: Missing collection */
class MissingCollectionError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing collection', program, cause);
        this.name = 'MissingCollection';
        this.code = 0x19; // 25
    }
}
exports.MissingCollectionError = MissingCollectionError;
codeToErrorMap.set(0x19, MissingCollectionError);
nameToErrorMap.set('MissingCollection', MissingCollectionError);
/** NoApprovals: Neither the asset or any plugins have approved this operation */
class NoApprovalsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Neither the asset or any plugins have approved this operation', program, cause);
        this.name = 'NoApprovals';
        this.code = 0x1a; // 26
    }
}
exports.NoApprovalsError = NoApprovalsError;
codeToErrorMap.set(0x1a, NoApprovalsError);
nameToErrorMap.set('NoApprovals', NoApprovalsError);
/** CannotRedelegate: Plugin Manager cannot redelegate a delegated plugin without revoking first */
class CannotRedelegateError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Plugin Manager cannot redelegate a delegated plugin without revoking first', program, cause);
        this.name = 'CannotRedelegate';
        this.code = 0x1b; // 27
    }
}
exports.CannotRedelegateError = CannotRedelegateError;
codeToErrorMap.set(0x1b, CannotRedelegateError);
nameToErrorMap.set('CannotRedelegate', CannotRedelegateError);
/** InvalidPluginSetting: Invalid setting for plugin */
class InvalidPluginSettingError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid setting for plugin', program, cause);
        this.name = 'InvalidPluginSetting';
        this.code = 0x1c; // 28
    }
}
exports.InvalidPluginSettingError = InvalidPluginSettingError;
codeToErrorMap.set(0x1c, InvalidPluginSettingError);
nameToErrorMap.set('InvalidPluginSetting', InvalidPluginSettingError);
/** ConflictingAuthority: Cannot specify both an update authority and collection on an asset */
class ConflictingAuthorityError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot specify both an update authority and collection on an asset', program, cause);
        this.name = 'ConflictingAuthority';
        this.code = 0x1d; // 29
    }
}
exports.ConflictingAuthorityError = ConflictingAuthorityError;
codeToErrorMap.set(0x1d, ConflictingAuthorityError);
nameToErrorMap.set('ConflictingAuthority', ConflictingAuthorityError);
/** InvalidLogWrapperProgram: Invalid Log Wrapper Program */
class InvalidLogWrapperProgramError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Log Wrapper Program', program, cause);
        this.name = 'InvalidLogWrapperProgram';
        this.code = 0x1e; // 30
    }
}
exports.InvalidLogWrapperProgramError = InvalidLogWrapperProgramError;
codeToErrorMap.set(0x1e, InvalidLogWrapperProgramError);
nameToErrorMap.set('InvalidLogWrapperProgram', InvalidLogWrapperProgramError);
/** ExternalPluginAdapterNotFound: External Plugin Adapter not found */
class ExternalPluginAdapterNotFoundError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('External Plugin Adapter not found', program, cause);
        this.name = 'ExternalPluginAdapterNotFound';
        this.code = 0x1f; // 31
    }
}
exports.ExternalPluginAdapterNotFoundError = ExternalPluginAdapterNotFoundError;
codeToErrorMap.set(0x1f, ExternalPluginAdapterNotFoundError);
nameToErrorMap.set('ExternalPluginAdapterNotFound', ExternalPluginAdapterNotFoundError);
/** ExternalPluginAdapterAlreadyExists: External Plugin Adapter already exists */
class ExternalPluginAdapterAlreadyExistsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('External Plugin Adapter already exists', program, cause);
        this.name = 'ExternalPluginAdapterAlreadyExists';
        this.code = 0x20; // 32
    }
}
exports.ExternalPluginAdapterAlreadyExistsError = ExternalPluginAdapterAlreadyExistsError;
codeToErrorMap.set(0x20, ExternalPluginAdapterAlreadyExistsError);
nameToErrorMap.set('ExternalPluginAdapterAlreadyExists', ExternalPluginAdapterAlreadyExistsError);
/** MissingAsset: Missing asset needed for extra account PDA derivation */
class MissingAssetError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing asset needed for extra account PDA derivation', program, cause);
        this.name = 'MissingAsset';
        this.code = 0x21; // 33
    }
}
exports.MissingAssetError = MissingAssetError;
codeToErrorMap.set(0x21, MissingAssetError);
nameToErrorMap.set('MissingAsset', MissingAssetError);
/** MissingExternalPluginAdapterAccount: Missing account needed for external plugin adapter */
class MissingExternalPluginAdapterAccountError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing account needed for external plugin adapter', program, cause);
        this.name = 'MissingExternalPluginAdapterAccount';
        this.code = 0x22; // 34
    }
}
exports.MissingExternalPluginAdapterAccountError = MissingExternalPluginAdapterAccountError;
codeToErrorMap.set(0x22, MissingExternalPluginAdapterAccountError);
nameToErrorMap.set('MissingExternalPluginAdapterAccount', MissingExternalPluginAdapterAccountError);
/** OracleCanRejectOnly: Oracle external plugin adapter can only be configured to reject */
class OracleCanRejectOnlyError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Oracle external plugin adapter can only be configured to reject', program, cause);
        this.name = 'OracleCanRejectOnly';
        this.code = 0x23; // 35
    }
}
exports.OracleCanRejectOnlyError = OracleCanRejectOnlyError;
codeToErrorMap.set(0x23, OracleCanRejectOnlyError);
nameToErrorMap.set('OracleCanRejectOnly', OracleCanRejectOnlyError);
/** RequiresLifecycleCheck: External plugin adapter must have at least one lifecycle check */
class RequiresLifecycleCheckError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('External plugin adapter must have at least one lifecycle check', program, cause);
        this.name = 'RequiresLifecycleCheck';
        this.code = 0x24; // 36
    }
}
exports.RequiresLifecycleCheckError = RequiresLifecycleCheckError;
codeToErrorMap.set(0x24, RequiresLifecycleCheckError);
nameToErrorMap.set('RequiresLifecycleCheck', RequiresLifecycleCheckError);
/** DuplicateLifecycleChecks: Duplicate lifecycle checks were provided for external plugin adapter  */
class DuplicateLifecycleChecksError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Duplicate lifecycle checks were provided for external plugin adapter ', program, cause);
        this.name = 'DuplicateLifecycleChecks';
        this.code = 0x25; // 37
    }
}
exports.DuplicateLifecycleChecksError = DuplicateLifecycleChecksError;
codeToErrorMap.set(0x25, DuplicateLifecycleChecksError);
nameToErrorMap.set('DuplicateLifecycleChecks', DuplicateLifecycleChecksError);
/** InvalidOracleAccountData: Could not read from oracle account */
class InvalidOracleAccountDataError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Could not read from oracle account', program, cause);
        this.name = 'InvalidOracleAccountData';
        this.code = 0x26; // 38
    }
}
exports.InvalidOracleAccountDataError = InvalidOracleAccountDataError;
codeToErrorMap.set(0x26, InvalidOracleAccountDataError);
nameToErrorMap.set('InvalidOracleAccountData', InvalidOracleAccountDataError);
/** UninitializedOracleAccount: Oracle account is uninitialized */
class UninitializedOracleAccountError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Oracle account is uninitialized', program, cause);
        this.name = 'UninitializedOracleAccount';
        this.code = 0x27; // 39
    }
}
exports.UninitializedOracleAccountError = UninitializedOracleAccountError;
codeToErrorMap.set(0x27, UninitializedOracleAccountError);
nameToErrorMap.set('UninitializedOracleAccount', UninitializedOracleAccountError);
/** MissingSigner: Missing required signer for operation */
class MissingSignerError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing required signer for operation', program, cause);
        this.name = 'MissingSigner';
        this.code = 0x28; // 40
    }
}
exports.MissingSignerError = MissingSignerError;
codeToErrorMap.set(0x28, MissingSignerError);
nameToErrorMap.set('MissingSigner', MissingSignerError);
/** InvalidPluginOperation: Invalid plugin operation */
class InvalidPluginOperationError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid plugin operation', program, cause);
        this.name = 'InvalidPluginOperation';
        this.code = 0x29; // 41
    }
}
exports.InvalidPluginOperationError = InvalidPluginOperationError;
codeToErrorMap.set(0x29, InvalidPluginOperationError);
nameToErrorMap.set('InvalidPluginOperation', InvalidPluginOperationError);
/** CollectionMustBeEmpty: Collection must be empty to be burned */
class CollectionMustBeEmptyError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Collection must be empty to be burned', program, cause);
        this.name = 'CollectionMustBeEmpty';
        this.code = 0x2a; // 42
    }
}
exports.CollectionMustBeEmptyError = CollectionMustBeEmptyError;
codeToErrorMap.set(0x2a, CollectionMustBeEmptyError);
nameToErrorMap.set('CollectionMustBeEmpty', CollectionMustBeEmptyError);
/** TwoDataSources: Two data sources provided, only one is allowed */
class TwoDataSourcesError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Two data sources provided, only one is allowed', program, cause);
        this.name = 'TwoDataSources';
        this.code = 0x2b; // 43
    }
}
exports.TwoDataSourcesError = TwoDataSourcesError;
codeToErrorMap.set(0x2b, TwoDataSourcesError);
nameToErrorMap.set('TwoDataSources', TwoDataSourcesError);
/** UnsupportedOperation: External Plugin does not support this operation */
class UnsupportedOperationError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('External Plugin does not support this operation', program, cause);
        this.name = 'UnsupportedOperation';
        this.code = 0x2c; // 44
    }
}
exports.UnsupportedOperationError = UnsupportedOperationError;
codeToErrorMap.set(0x2c, UnsupportedOperationError);
nameToErrorMap.set('UnsupportedOperation', UnsupportedOperationError);
/** NoDataSources: No data sources provided, one is required */
class NoDataSourcesError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('No data sources provided, one is required', program, cause);
        this.name = 'NoDataSources';
        this.code = 0x2d; // 45
    }
}
exports.NoDataSourcesError = NoDataSourcesError;
codeToErrorMap.set(0x2d, NoDataSourcesError);
nameToErrorMap.set('NoDataSources', NoDataSourcesError);
/** InvalidPluginAdapterTarget: This plugin adapter cannot be added to an Asset */
class InvalidPluginAdapterTargetError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('This plugin adapter cannot be added to an Asset', program, cause);
        this.name = 'InvalidPluginAdapterTarget';
        this.code = 0x2e; // 46
    }
}
exports.InvalidPluginAdapterTargetError = InvalidPluginAdapterTargetError;
codeToErrorMap.set(0x2e, InvalidPluginAdapterTargetError);
nameToErrorMap.set('InvalidPluginAdapterTarget', InvalidPluginAdapterTargetError);
/** CannotAddDataSection: Cannot add a Data Section without a linked external plugin */
class CannotAddDataSectionError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot add a Data Section without a linked external plugin', program, cause);
        this.name = 'CannotAddDataSection';
        this.code = 0x2f; // 47
    }
}
exports.CannotAddDataSectionError = CannotAddDataSectionError;
codeToErrorMap.set(0x2f, CannotAddDataSectionError);
nameToErrorMap.set('CannotAddDataSection', CannotAddDataSectionError);
/** PermanentDelegatesPreventMove: Cannot move asset to collection with permanent delegates */
class PermanentDelegatesPreventMoveError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Cannot move asset to collection with permanent delegates', program, cause);
        this.name = 'PermanentDelegatesPreventMove';
        this.code = 0x30; // 48
    }
}
exports.PermanentDelegatesPreventMoveError = PermanentDelegatesPreventMoveError;
codeToErrorMap.set(0x30, PermanentDelegatesPreventMoveError);
nameToErrorMap.set('PermanentDelegatesPreventMove', PermanentDelegatesPreventMoveError);
/** InvalidExecutePda: Invalid Signing PDA for Asset or Collection Execute */
class InvalidExecutePdaError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Signing PDA for Asset or Collection Execute', program, cause);
        this.name = 'InvalidExecutePda';
        this.code = 0x31; // 49
    }
}
exports.InvalidExecutePdaError = InvalidExecutePdaError;
codeToErrorMap.set(0x31, InvalidExecutePdaError);
nameToErrorMap.set('InvalidExecutePda', InvalidExecutePdaError);
/** BlockedByBubblegumV2: Bubblegum V2 Plugin limits other plugins */
class BlockedByBubblegumV2Error extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Bubblegum V2 Plugin limits other plugins', program, cause);
        this.name = 'BlockedByBubblegumV2';
        this.code = 0x32; // 50
    }
}
exports.BlockedByBubblegumV2Error = BlockedByBubblegumV2Error;
codeToErrorMap.set(0x32, BlockedByBubblegumV2Error);
nameToErrorMap.set('BlockedByBubblegumV2', BlockedByBubblegumV2Error);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getMplCoreErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap.get(code);
    return constructor ? new constructor(program, cause) : null;
}
exports.getMplCoreErrorFromCode = getMplCoreErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getMplCoreErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap.get(name);
    return constructor ? new constructor(program, cause) : null;
}
exports.getMplCoreErrorFromName = getMplCoreErrorFromName;
//# sourceMappingURL=mplCore.js.map