/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type UpdateCollectionV1InstructionAccounts = {
    /** The address of the asset */
    collection: PublicKey | Pda;
    /** The account paying for the storage fees */
    payer?: Signer;
    /** The update authority or update authority delegate of the asset */
    authority?: Signer;
    /** The new update authority of the asset */
    newUpdateAuthority?: PublicKey | Pda;
    /** The system program */
    systemProgram?: PublicKey | Pda;
    /** The SPL Noop Program */
    logWrapper?: PublicKey | Pda;
};
export type UpdateCollectionV1InstructionData = {
    discriminator: number;
    newName: Option<string>;
    newUri: Option<string>;
};
export type UpdateCollectionV1InstructionDataArgs = {
    newName?: OptionOrNullable<string>;
    newUri?: OptionOrNullable<string>;
};
export declare function getUpdateCollectionV1InstructionDataSerializer(): Serializer<UpdateCollectionV1InstructionDataArgs, UpdateCollectionV1InstructionData>;
export type UpdateCollectionV1InstructionArgs = UpdateCollectionV1InstructionDataArgs;
export declare function updateCollectionV1(context: Pick<Context, 'payer' | 'programs'>, input: UpdateCollectionV1InstructionAccounts & UpdateCollectionV1InstructionArgs): TransactionBuilder;
