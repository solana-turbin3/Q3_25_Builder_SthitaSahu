/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { CompressionProof, CompressionProofArgs } from '../types';
export type BurnCollectionV1InstructionAccounts = {
    /** The address of the asset */
    collection: PublicKey | Pda;
    /** The account paying for the storage fees */
    payer?: Signer;
    /** The owner or delegate of the asset */
    authority?: Signer;
    /** The SPL Noop Program */
    logWrapper?: PublicKey | Pda;
};
export type BurnCollectionV1InstructionData = {
    discriminator: number;
    compressionProof: Option<CompressionProof>;
};
export type BurnCollectionV1InstructionDataArgs = {
    compressionProof: OptionOrNullable<CompressionProofArgs>;
};
export declare function getBurnCollectionV1InstructionDataSerializer(): Serializer<BurnCollectionV1InstructionDataArgs, BurnCollectionV1InstructionData>;
export type BurnCollectionV1InstructionArgs = BurnCollectionV1InstructionDataArgs;
export declare function burnCollectionV1(context: Pick<Context, 'payer' | 'programs'>, input: BurnCollectionV1InstructionAccounts & BurnCollectionV1InstructionArgs): TransactionBuilder;
