/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, OptionOrNullable, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { AssetV1AccountData } from '../../hooked';
import { BaseUpdateAuthorityArgs, KeyArgs } from '../types';
export type AssetV1 = Account<AssetV1AccountData>;
export declare function deserializeAssetV1(rawAccount: RpcAccount): AssetV1;
export declare function fetchAssetV1(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<AssetV1>;
export declare function safeFetchAssetV1(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<AssetV1 | null>;
export declare function fetchAllAssetV1(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<AssetV1[]>;
export declare function safeFetchAllAssetV1(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<AssetV1[]>;
export declare function getAssetV1GpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<AssetV1, {
    key: KeyArgs;
    owner: PublicKey;
    updateAuthority: BaseUpdateAuthorityArgs;
    name: string;
    uri: string;
    seq: OptionOrNullable<number | bigint>;
}>;
