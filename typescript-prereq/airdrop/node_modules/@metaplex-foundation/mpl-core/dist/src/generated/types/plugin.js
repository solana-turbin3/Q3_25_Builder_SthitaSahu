"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPlugin = exports.plugin = exports.getPluginSerializer = void 0;
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const _1 = require(".");
function getPluginSerializer() {
    return (0, serializers_1.dataEnum)([
        [
            'Royalties',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getBaseRoyaltiesSerializer)()])],
            ]),
        ],
        [
            'FreezeDelegate',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getFreezeDelegateSerializer)()])],
            ]),
        ],
        [
            'BurnDelegate',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getBurnDelegateSerializer)()])],
            ]),
        ],
        [
            'TransferDelegate',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getTransferDelegateSerializer)()])],
            ]),
        ],
        [
            'UpdateDelegate',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getUpdateDelegateSerializer)()])],
            ]),
        ],
        [
            'PermanentFreezeDelegate',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getPermanentFreezeDelegateSerializer)()])],
            ]),
        ],
        [
            'Attributes',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getAttributesSerializer)()])],
            ]),
        ],
        [
            'PermanentTransferDelegate',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getPermanentTransferDelegateSerializer)()])],
            ]),
        ],
        [
            'PermanentBurnDelegate',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getPermanentBurnDelegateSerializer)()])],
            ]),
        ],
        [
            'Edition',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getEditionSerializer)()])],
            ]),
        ],
        [
            'MasterEdition',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getBaseMasterEditionSerializer)()])],
            ]),
        ],
        [
            'AddBlocker',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getAddBlockerSerializer)()])],
            ]),
        ],
        [
            'ImmutableMetadata',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getImmutableMetadataSerializer)()])],
            ]),
        ],
        [
            'VerifiedCreators',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getVerifiedCreatorsSerializer)()])],
            ]),
        ],
        [
            'Autograph',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getAutographSerializer)()])],
            ]),
        ],
        [
            'BubblegumV2',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getBubblegumV2Serializer)()])],
            ]),
        ],
        [
            'FreezeExecute',
            (0, serializers_1.struct)([
                ['fields', (0, serializers_1.tuple)([(0, _1.getFreezeExecuteSerializer)()])],
            ]),
        ],
    ], { description: 'Plugin' });
}
exports.getPluginSerializer = getPluginSerializer;
function plugin(kind, data) {
    return Array.isArray(data)
        ? { __kind: kind, fields: data }
        : { __kind: kind, ...(data ?? {}) };
}
exports.plugin = plugin;
function isPlugin(kind, value) {
    return value.__kind === kind;
}
exports.isPlugin = isPlugin;
//# sourceMappingURL=plugin.js.map