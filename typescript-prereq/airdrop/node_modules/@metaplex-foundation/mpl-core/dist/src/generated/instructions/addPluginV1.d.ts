/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { BasePluginAuthority, BasePluginAuthorityArgs, Plugin, PluginArgs } from '../types';
export type AddPluginV1InstructionAccounts = {
    /** The address of the asset */
    asset: PublicKey | Pda;
    /** The collection to which the asset belongs */
    collection?: PublicKey | Pda;
    /** The account paying for the storage fees */
    payer?: Signer;
    /** The owner or delegate of the asset */
    authority?: Signer;
    /** The system program */
    systemProgram?: PublicKey | Pda;
    /** The SPL Noop Program */
    logWrapper?: PublicKey | Pda;
};
export type AddPluginV1InstructionData = {
    discriminator: number;
    plugin: Plugin;
    initAuthority: Option<BasePluginAuthority>;
};
export type AddPluginV1InstructionDataArgs = {
    plugin: PluginArgs;
    initAuthority?: OptionOrNullable<BasePluginAuthorityArgs>;
};
export declare function getAddPluginV1InstructionDataSerializer(): Serializer<AddPluginV1InstructionDataArgs, AddPluginV1InstructionData>;
export type AddPluginV1InstructionArgs = AddPluginV1InstructionDataArgs;
export declare function addPluginV1(context: Pick<Context, 'payer' | 'programs'>, input: AddPluginV1InstructionAccounts & AddPluginV1InstructionArgs): TransactionBuilder;
