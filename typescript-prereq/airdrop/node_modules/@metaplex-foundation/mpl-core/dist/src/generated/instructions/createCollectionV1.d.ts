/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { PluginAuthorityPair, PluginAuthorityPairArgs } from '../types';
export type CreateCollectionV1InstructionAccounts = {
    /** The address of the new asset */
    collection: Signer;
    /** The authority of the new asset */
    updateAuthority?: PublicKey | Pda;
    /** The account paying for the storage fees */
    payer?: Signer;
    /** The system program */
    systemProgram?: PublicKey | Pda;
};
export type CreateCollectionV1InstructionData = {
    discriminator: number;
    name: string;
    uri: string;
    plugins: Option<Array<PluginAuthorityPair>>;
};
export type CreateCollectionV1InstructionDataArgs = {
    name: string;
    uri: string;
    plugins?: OptionOrNullable<Array<PluginAuthorityPairArgs>>;
};
export declare function getCreateCollectionV1InstructionDataSerializer(): Serializer<CreateCollectionV1InstructionDataArgs, CreateCollectionV1InstructionData>;
export type CreateCollectionV1InstructionArgs = CreateCollectionV1InstructionDataArgs;
export declare function createCollectionV1(context: Pick<Context, 'payer' | 'programs'>, input: CreateCollectionV1InstructionAccounts & CreateCollectionV1InstructionArgs): TransactionBuilder;
