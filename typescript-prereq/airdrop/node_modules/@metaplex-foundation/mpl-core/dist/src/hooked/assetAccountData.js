"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAssetV1AccountDataSerializer = void 0;
const generated_1 = require("../generated");
const assetV1AccountData_1 = require("../generated/types/assetV1AccountData");
const plugins_1 = require("../plugins");
const pluginRegistryV1Data_1 = require("./pluginRegistryV1Data");
const externalPluginAdapters_1 = require("../plugins/externalPluginAdapters");
const getAssetV1AccountDataSerializer = () => ({
    description: 'AssetAccountData',
    fixedSize: null,
    maxSize: null,
    serialize: () => {
        throw new Error('Operation not supported.');
    },
    deserialize: (buffer, offset = 0) => {
        // Account.
        const [asset, assetOffset] = (0, assetV1AccountData_1.getAssetV1AccountDataSerializer)().deserialize(buffer, offset);
        if (asset.key !== generated_1.Key.AssetV1) {
            throw new Error(`Expected an Asset account, got key: ${asset.key}`);
        }
        let pluginHeader;
        let pluginRegistry;
        let pluginsList;
        let externalPluginAdaptersList;
        let finalOffset = assetOffset;
        if (buffer.length !== assetOffset) {
            [pluginHeader] = (0, generated_1.getPluginHeaderV1AccountDataSerializer)().deserialize(buffer, assetOffset);
            [pluginRegistry, finalOffset] =
                (0, pluginRegistryV1Data_1.getPluginRegistryV1AccountDataSerializer)().deserialize(buffer, Number(pluginHeader.pluginRegistryOffset));
            pluginsList = (0, plugins_1.registryRecordsToPluginsList)(pluginRegistry.registry, buffer);
            externalPluginAdaptersList =
                (0, externalPluginAdapters_1.externalRegistryRecordsToExternalPluginAdapterList)(pluginRegistry.externalRegistry, buffer);
        }
        const updateAuth = {
            type: asset.updateAuthority.__kind,
            address: asset.updateAuthority.__kind === 'None'
                ? undefined
                : asset.updateAuthority.fields[0],
        };
        return [
            {
                pluginHeader,
                ...pluginsList,
                ...externalPluginAdaptersList,
                ...asset,
                updateAuthority: updateAuth,
            },
            finalOffset,
        ];
    },
});
exports.getAssetV1AccountDataSerializer = getAssetV1AccountDataSerializer;
//# sourceMappingURL=assetAccountData.js.map