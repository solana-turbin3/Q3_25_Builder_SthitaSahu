"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPluginRegistryV1AccountDataSerializer = exports.getAdapterRegistryRecordSerializer = exports.getRegistryRecordSerializer = void 0;
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const generated_1 = require("../generated");
function getRegistryRecordSerializer() {
    return {
        description: 'RegistryRecordWithUnknown',
        fixedSize: null,
        maxSize: null,
        serialize: () => {
            throw new Error('Operation not supported.');
        },
        deserialize: (buffer, offset = 0) => {
            let [pluginType, pluginTypeOffset, isUnknown] = [
                generated_1.PluginType.Attributes,
                offset + 1,
                true,
            ];
            try {
                [pluginType, pluginTypeOffset] = (0, generated_1.getPluginTypeSerializer)().deserialize(buffer, offset);
                isUnknown = false;
            }
            catch (e) {
                // Do nothing, unknown plugin type
            }
            const [authority, authorityOffset] = (0, generated_1.getBasePluginAuthoritySerializer)().deserialize(buffer, pluginTypeOffset);
            const [pluginOffset, pluginOffsetOffset] = (0, serializers_1.u64)().deserialize(buffer, authorityOffset);
            return [
                {
                    pluginType,
                    authority,
                    offset: pluginOffset,
                    isUnknown,
                },
                pluginOffsetOffset,
            ];
        },
    };
}
exports.getRegistryRecordSerializer = getRegistryRecordSerializer;
function getAdapterRegistryRecordSerializer() {
    return {
        description: 'AdapterRegistryRecordWithUnknown',
        fixedSize: null,
        maxSize: null,
        serialize: () => {
            throw new Error('Operation not supported.');
        },
        deserialize: (buffer, offset = 0) => {
            let [pluginType, pluginTypeOffset, isUnknown] = [
                generated_1.ExternalPluginAdapterType.AppData,
                offset + 1,
                true,
            ];
            try {
                [pluginType, pluginTypeOffset] =
                    (0, generated_1.getExternalPluginAdapterTypeSerializer)().deserialize(buffer, offset);
                isUnknown = false;
            }
            catch (e) {
                // do nothing
            }
            const [authority, authorityOffset] = (0, generated_1.getBasePluginAuthoritySerializer)().deserialize(buffer, pluginTypeOffset);
            const [lifecycleChecks, lifecycleChecksOffset] = (0, serializers_1.option)((0, serializers_1.array)((0, serializers_1.tuple)([
                (0, generated_1.getHookableLifecycleEventSerializer)(),
                (0, generated_1.getExternalCheckResultSerializer)(),
            ]))).deserialize(buffer, authorityOffset);
            const [pluginOffset, pluginOffsetOffset] = (0, serializers_1.u64)().deserialize(buffer, lifecycleChecksOffset);
            const [dataOffset, dataOffsetOffset] = (0, serializers_1.option)((0, serializers_1.u64)()).deserialize(buffer, pluginOffsetOffset);
            const [dataLen, dataLenOffset] = (0, serializers_1.option)((0, serializers_1.u64)()).deserialize(buffer, dataOffsetOffset);
            return [
                {
                    pluginType,
                    authority,
                    lifecycleChecks,
                    offset: pluginOffset,
                    isUnknown,
                    dataOffset,
                    dataLen,
                },
                dataLenOffset,
            ];
        },
    };
}
exports.getAdapterRegistryRecordSerializer = getAdapterRegistryRecordSerializer;
function getPluginRegistryV1AccountDataSerializer() {
    return {
        description: 'PluginRegistryV1AccountData',
        fixedSize: null,
        maxSize: null,
        serialize: () => {
            throw new Error('Operation not supported.');
        },
        deserialize: (buffer, offset = 0) => {
            const [key, keyOffset] = (0, generated_1.getKeySerializer)().deserialize(buffer, offset);
            if (key !== generated_1.Key.PluginRegistryV1) {
                throw new Error(`Expected a PluginRegistryV1 account, got key: ${key}`);
            }
            const [registry, registryOffset] = (0, serializers_1.array)(getRegistryRecordSerializer()).deserialize(buffer, keyOffset);
            const [externalRegistry, externalRegistryOffset] = (0, serializers_1.array)(getAdapterRegistryRecordSerializer()).deserialize(buffer, registryOffset);
            return [
                {
                    key,
                    registry: registry.filter((record) => !record.isUnknown),
                    externalRegistry: externalRegistry.filter((record) => !record.isUnknown),
                },
                externalRegistryOffset,
            ];
        },
    };
}
exports.getPluginRegistryV1AccountDataSerializer = getPluginRegistryV1AccountDataSerializer;
//# sourceMappingURL=pluginRegistryV1Data.js.map